class wing{

  void checkcollision(float x1, float y1, float x2, float y2, Ball[] balls){
    float deltax = x2 - x1;
    float deltay = y2 - y1;
    double theta = Math.atan2(deltay, deltax);
    //System.out.println(Math.toDegrees(theta));
    // Get distances between the balls components
    PVector wb = balls[0].position;
    PVector endline = new PVector(x2, y2);
    PVector distanceVect = PVector.sub(wb , endline);

    // Calculate magnitude of the vector separating the balls
    float distanceVectMag = distanceVect.mag();
    boolean collide = false;
    for (int j = 0; j <= distanceVectMag; j++){
      float pointx = (float)(x1 + (Math.cos(theta) * j));
      float pointy = (float)(y1 + (Math.sin(theta) * j));
      PVector pointonline = new PVector(pointx, pointy);
    for (int i = 1; i < balls.length; i++){
      if (PVector.sub(pointonline, balls[i].position).mag() < balls[0].radius * 2){
        //for line scale we need to
        float linedx = balls[i].position.x - balls[0].position.x;
        float linedy = balls[i].position.y - balls[0].position.y;
        double bestangle = Math.atan2(linedy, linedx);
        double bestx = balls[i].position.x - (2 * balls[0].radius * (Math.cos(bestangle)));
        double besty = balls[i].position.y - (2 * balls[0].radius * (Math.sin(bestangle)));
        PVector best = new PVector((float)bestx, (float)besty);
        PVector distvec = PVector.sub(best, pointonline);
        float dist = Math.abs(distvec.mag());
        float linescale = ((2.8 * balls[0].radius) - dist) / (2.8 * balls[0].radius);
        float hitrebound = 60 * linescale;
        float wbrebound = 60 * (1 - linescale);
        noStroke();
        fill(255,255,255,115);
      //fill(204);
      ellipse(pointx, pointy, balls[0].radius * 2, balls[0].radius * 2);
      collide = true;
      //draw the rebound lines
      float deltabx = balls[i].position.x - pointx;
      float deltaby =  balls[i].position.y - pointy;
      double rebound = Math.atan2(deltaby, deltabx);
      float whereballisx = balls[i].position.x;
      float whereballisy = balls[i].position.y;
      stroke(126);
      strokeWeight(5);
      line(whereballisx , whereballisy, whereballisx + (float)(hitrebound * Math.cos(rebound)), whereballisy + (float)(hitrebound * Math.sin(rebound)));
      line(x1 , y1 , pointx, pointy);
      //wb rebound
      float thetaplus = (float)(rebound + (Math.PI / 2));
      float thetaminus = (float)(rebound - (Math.PI / 2));
      float reboundDegrees = (float)(Math.toDegrees(theta));
      float plusdegrees = (float)(Math.toDegrees(thetaplus));
      float minusdegrees = (float)(Math.toDegrees(thetaminus));
      float distplus = 180 - abs(abs(reboundDegrees - plusdegrees) - 180); 
      float distminus = 180 - abs(abs(reboundDegrees - minusdegrees) - 180); 
      if (distplus > distminus){
         line(pointx, pointy, pointx + (float)(Math.cos(thetaminus) * wbrebound), pointy + (float)(Math.sin(thetaminus) * wbrebound));

      }
      else{
           line(pointx, pointy, pointx + (float)(Math.cos(thetaplus) * wbrebound), pointy + (float)(Math.sin(thetaplus) * wbrebound));

      }
      //System.out.println(Math.toDegrees(rebound) + " R: " + Math.toDegrees(thetaplus) + " P:M " + Math.toDegrees(thetaminus));
      //done rebound
      }
  }
  if (collide){
    break;
  }
    }
    if (!collide){
    stroke(126);
  strokeWeight(5);
  line(x1 , y1 , x2, y2);
    }
}
}
